'''python复习'''
'''type函数'''
x = 3
print(type(x))#<class 'int'>

'''range([start,] end [, step] )'''
'''该函数返回具有惰性求值特点的range对象，其中包含左闭右开区间[start,end)内以step为步长的整数。
参数start默认为0，step默认为1。'''
print(list(range(1,10,2)))
'''map(func, *iterables)'''
'''内置函数map()把一个函数func依次映射到序列或迭代器对象的每个元素上，并返回一个可迭代的map对象作为结果，
map对象中每个元素是原序列中元素经过函数func处理后的结果。
'''
def add(x, y):           #可以接收2个参数的函数
	return x+y
print(list(map(add, range(5), range(5,10))))      #把双参数函数映射到两个序列上,[5, 7, 9, 11, 13]


'''zip(seq1 [, seq2 [...]])'''
'''zip()函数用来把多个可迭代对象中的元素压缩到一起，返回一个可迭代的zip对象，
其中每个元素都是包含原来的多个可迭代对象对应位置上元素的元组，如同拉拉链一样。'''
print(list(map(str,range(5))))#把列表中元素转换为字符串
x=zip('abcd','1234')
print(list(x))       #[('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]
'''Python的对象模型'''
#对象是python语言中最基本的概念，在python中处理的一切都是对象。
# python中有许多内置对象可供编程者使用，内置对象可直接使用，如数字、字符串、列表、del等；
# 非内置对象需要导入模块才能使用，如正弦函数sin(x)，随机数产生函数random( )等。

'''sort(),sorted()'''
'''
sort()方法支持原地排序，而内置函数sorted()返回新的列表，并不对原列表进行任何修改。
sorted()方法可以对列表、元组、字典、range对象等进行排序。
列表的sort()方法和内置函数sorted()都支持key参数实现复杂排序要求。
'''
'''
list.sort(key=None, reverse=False)	
对列表list中的元素进行排序，key用来指定排序依据，reverse决定升序（False）还是降序（True）
'''
persons = [{'name': 'B', 'age': 37}, {'name': 'Z', 'age': 40}, {'name': 'L', 'age': 50},{'name': 'B', 'age': 43}]
#使用key来指定排序依据，先按姓名升序排序，姓名相同的按年龄降序排序
print(sorted(persons,key=lambda x:(x['name'],-x['age'])))
print(persons)#原列表无修改
persons.sort(key=lambda x:(x['name'],-x['age']))
print(persons)#原列表被修改

print(isinstance(3, int))  # 测试对象是否是某个类型的实例,返回True
'''正则表达式'''
'''
正则表达式对象的match(string[, pos[, endpos]])方法用于在字符串开头或指定位置进行搜索，
模式必须出现在字符串开头或指定位置；
正则表达式对象的search(string[, pos[, endpos]])方法用于在整个字符串中进行搜索；
'''
import re
example = 'ShanDong Institute of Business and Technology'
pattern = re.compile(r'\b[a-zA-Z]{3}\b')    # 查找3个字母长的单词
print(pattern.match(example))                    #从字符串开头开始匹配，失败返回空值
print(pattern.search(example))                   #在整个字符串中搜索，成功
'''lambda表达式'''
'''lambda表达式可以用来声明匿名函数，也就是没有函数名字的临时使用的小函数，
尤其适合需要一个函数作为另一个函数参数的场合。
lambda表达式只可以包含一个表达式，该表达式的计算结果可以看作是函数的返回值，
不允许包含其他复杂的语句，但在表达式中可以调用其他函数。
'''
def demo(n):
    return n*n
a_list = [1,2,3,4,5]
print(list(map(lambda x: demo(x), a_list)))  #在lambda表达式中调用函数,[1, 4, 9, 16, 25]
print('\n')
import random
x=[[random.randint(1,10) for j in range(5)]for i in range(5)]#包含5个子列表的列表,每个子列表中包含5个1到10之间的随机数
y = sorted(x, key=lambda item: (item[1], item[4]))#按子列表中第2个元素升序、第5个元素升序排序
for item in y:
	print(item)
'''python的特点'''
#Python是一门跨平台、开源、免费的解释型高级动态编程语言，支持伪编译将Python源程序转换为字节码来优化程序和提高运行速度，
# 支持使用py2exe、pyinstaller或cx_Freeze工具将Python程序转换为二进制可执行文件。
# Python支持命令式编程、函数式编程，完全支持面向对象程序设计，语法简洁清晰，拥有大量的几乎支持所有领域应用开发的成熟扩展库。
# 胶水语言


'''构造函数和析构函数'''

'''文件内容操作三部曲：打开、读写、关闭'''
'''open(file, mode='r', buffering=-1, encoding=None, errors=None,
     newline=None, closefd=True, opener=None)
f1 = open( 'file1.txt', 'r' )
f1.close()
with open('file.txt','w') as fp:
    fp.write(s)
with open('file.txt') as fp:
    print(fp.read())'''
'''查找文件路径：os.walk函数'''
'''list_dirs = os.walk(path)        #os.walk返回一个元组，包括3个元素：所有路径名、所有目录列表与文件列表
print(os.path.join(root, d))  # 获取完整路径
print(os.path.join(root, f))     #获取文件绝对路径'''
'''混入机制'''
#Python类型的动态性使得我们可以动态为自定义类及其对象增加新的属性和行为，俗称混入（mixin）机制，
# 这在大型项目开发中会非常方便和实用。例如系统中的所有用户分类非常复杂，不同用户组具有不同的行为和权限，
# 并且可能会经常改变。这时候我们可以独立地定义一些行为，然后根据需要来为不同的用户设置相应的行为能力。
'''自动内存管理机制'''
#Python采用的是基于值的自动内存管理方式，当为对象修改值时，并不是真的直接修改变量的值，而是使变量指向
# 新的值，这对于Python所有类型的变量都是一样的。
'''字符串驻留机制'''
#Python字符串驻留机制：对于短字符串，将其赋值给多个不同的对象时，内存中只有一个副本，多个对象共享该副本。长字符串不遵守驻留机制。
'''修饰器'''
#修饰器（decorator）是函数嵌套定义的另一个重要应用。修饰器本质上也是一个函数，只不过这个函数接收其他函数
# 作为参数并对其进行一定的改造之后返回新函数。静态方法、类方法、属性等也都是通过修饰器实现的。
# 定义其他函数调用之前或之后需要执行的通用代码，可作用于其他任何函数，提高代码复用度。
'''方法和函数的区别'''
#在Python中，函数和方法是有区别的。方法一般指与特定实例绑定的函数，通过对象调用方法时，
# 对象本身将被作为第一个参数传递过去，普通函数并不具备这个特点。
class Demo:
    pass
t = Demo()
def test(self, v):
    self.value = v
t.test = test
print(t.test)                                #普通函数
print(t.test(t, 3))                          #必须为self参数传值
print("-------")
'''首先生成包含1000个随机字符的字符串，然后统计每个字符的出现次数。'''
import string
import random
x = string.ascii_letters + string.digits + string.punctuation
y = [random.choice(x) for i in range(1000)]
z = ''.join(y)
d = dict()                  #使用字典保存每个字符出现次数
for ch in z:
    d[ch] = d.get(ch, 0) + 1
    print(d[ch])
print("-----")
'''编写程序，计算组合数C(n,i)，即从n个元素中任选i个，有多少种选法。'''
def Cni1(n,i):
    if not (isinstance(n,int) and isinstance(i,int) and n>=i):
        print('n and i must be integers and n must be larger than or equal to i.')
        return
    result = 1
    Min, Max = sorted((i,n-i))
    for i in range(n,0,-1):
        if i>Max:
            result *= i
        elif i<=Min:
            result /= i
    return result
print(Cni1(5,3))